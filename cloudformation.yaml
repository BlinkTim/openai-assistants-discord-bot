AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 Instance with VPC, Subnets, Security Group, S3 Bucket, and User Data

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]
    Description: EC2 instance type
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access
  DiscordToken:
    Type: String
    Default: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Description: Discord token for the bot
  OpenAIToken:
    Type: String
    Default: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Description: OpenAI token for the bot
  AssistantToken:
    Type: String
    Default: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Description: Assistent token for the bot

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs eu-central-1]

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs eu-central-1]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: timsmysterylounges3
      AccessControl: Private
      Tags:
        - Key: Name
          Value: MyS3Bucket

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0a23a9827c6dab833
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum install -y aws-cli
          sudo yum update -y
          curl -sL https://rpm.nodesource.com/setup_lts.x | sudo bash -
          sudo yum install -y nodejs 
          sudo yum install -y git
          sudo yum install -y jq
          echo ${DiscordToken}
          echo ${OpenAIToken}
          echo ${AssistantToken}
          echo export DISCORDTOKEN=${DiscordToken} >> /etc/environment
          echo export OPENAI_API_KEY=${OpenAIToken} >> /etc/environment
          echo export ASSISTANT_ID=${AssistantToken} >> /etc/environment
          echo "Discord Token has been set in environment variables."
          sudo git clone https://github.com/BlinkTim/openai-assistants-discord-bot.git 
          cd openai-assistants-discord-bot
          sudo npm install
          sudo chmod +rx bot.js
          sudo chmod +rx mydata.jsonl
          sudo npm install pm2 -g
          pm2 startup systemd
          pm2 start bot.js
          pm2 save
          pm2 startup systemd
          pm2 start bot.js


